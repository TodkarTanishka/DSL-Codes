#include <iostream>
#include <string>
using namespace std;

class Stack {
    static const int MAX = 100;
    char arr[MAX];
    int top;

public:
    Stack() { top = -1; }

    bool isEmpty() { return top == -1; }
    bool isFull() { return top == MAX - 1; }

    void push(char ch) { if (!isFull()) arr[++top] = ch; }
    char pop() { if (!isEmpty()) return arr[top--]; return '\0'; }
    char peek() { if (!isEmpty()) return arr[top]; return '\0'; }
};

int precedence(char op) {
    if (op == '^') return 3;
    if (op == '*' || op == '/') return 2;
    if (op == '+' || op == '-') return 1;
    return 0;
}

bool isOperator(char ch) {
    return (ch == '+' || ch == '-' || ch == '*' || ch == '/' || ch == '^');
}

class InfixToPostfixConverter {
public:
    string convert(string exp) {
        Stack s;
        string postfix = "";

        for (int i = 0; i < exp.length(); i++) {
            char ch = exp[i];

            if ((ch >= 'A' && ch <= 'Z') || (ch >= 'a' && ch <= 'z') || (ch >= '0' && ch <= '9')) {
                postfix += ch;
            } 
            else if (ch == '(') {
                s.push(ch);
            } 
            else if (ch == ')') {
                while (!s.isEmpty() && s.peek() != '(')
                    postfix += s.pop();
                s.pop();
            } 
            else if (isOperator(ch)) {
                while (!s.isEmpty() && precedence(ch) <= precedence(s.peek()))
                    postfix += s.pop();
                s.push(ch);
            }
        }

        while (!s.isEmpty())
            postfix += s.pop();

        return postfix;
    }
};

int main() {
    InfixToPostfixConverter converter;
    string exp;
    char choice = 'Y';

    do {
        cout << "\nEnter an infix expression: ";
        cin >> exp;

        string postfix = converter.convert(exp);
        cout << "Postfix expression: " << postfix << endl;

        cout << "Do you want to convert another expression? (Y/N): ";
        cin >> choice;
    } while (choice == 'Y' || choice == 'y');

    return 0;
}
